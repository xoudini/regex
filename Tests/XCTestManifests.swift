#if !canImport(ObjectiveC)
import XCTest

extension NFATests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NFATests = [
        ("testAnyCharacterExpression", testAnyCharacterExpression),
        ("testAnyCharacterNFA", testAnyCharacterNFA),
        ("testCharacterSetExpression", testCharacterSetExpression),
        ("testCharacterSetNFA", testCharacterSetNFA),
        ("testComplexExpression1", testComplexExpression1),
        ("testComplexExpression2", testComplexExpression2),
        ("testComplexExpression3", testComplexExpression3),
        ("testConcatenatedCharacterSetNFA", testConcatenatedCharacterSetNFA),
        ("testConcatenatedNFA", testConcatenatedNFA),
        ("testConcatenatedSingleCharacterNFA", testConcatenatedSingleCharacterNFA),
        ("testEmptyNFA", testEmptyNFA),
        ("testKleeneStarExpression", testKleeneStarExpression),
        ("testLargeUnionNFA", testLargeUnionNFA),
        ("testLongConcatenatedNFA", testLongConcatenatedNFA),
        ("testOptionalExpression", testOptionalExpression),
        ("testPlusExpression", testPlusExpression),
        ("testReDoSExpression1", testReDoSExpression1),
        ("testReDoSExpression2", testReDoSExpression2),
        ("testReDoSExpression3", testReDoSExpression3),
        ("testSimpleExpression", testSimpleExpression),
        ("testSingleCharacterNFA", testSingleCharacterNFA),
        ("testUnionAndConcatenationCombined", testUnionAndConcatenationCombined),
        ("testUnionExpression", testUnionExpression),
        ("testUnionNFA", testUnionNFA),
    ]
}

extension ParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ParserTests = [
        ("testAnyCharacterExpression", testAnyCharacterExpression),
        ("testCharacterExpression", testCharacterExpression),
        ("testChoiceExpression", testChoiceExpression),
        ("testConcatenatedExpression", testConcatenatedExpression),
        ("testEmptyExpression", testEmptyExpression),
        ("testOptionalExpression", testOptionalExpression),
        ("testRepeatedExpression", testRepeatedExpression),
        ("testRepeatedPlusOneExpression", testRepeatedPlusOneExpression),
        ("testUnionExpression", testUnionExpression),
    ]
}

extension QueueTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__QueueTests = [
        ("testDequeue", testDequeue),
        ("testDequeueWithEmptyQueue", testDequeueWithEmptyQueue),
        ("testDequeueWithMultipleEntries", testDequeueWithMultipleEntries),
        ("testDesignatedInitializer", testDesignatedInitializer),
        ("testEnqueue", testEnqueue),
        ("testEnqueueWithMultipleEntries", testEnqueueWithMultipleEntries),
        ("testForInIteration", testForInIteration),
        ("testLiteralAssignment", testLiteralAssignment),
        ("testSubscript", testSubscript),
    ]
}

extension RegexTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegexTests = [
        ("testExample", testExample),
    ]
}

extension StackTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StackTests = [
        ("testDesignatedInitializer", testDesignatedInitializer),
        ("testForInIteration", testForInIteration),
        ("testLiteralAssignment", testLiteralAssignment),
        ("testPop", testPop),
        ("testPopWithEmptyStack", testPopWithEmptyStack),
        ("testPopWithMultipleEntries", testPopWithMultipleEntries),
        ("testPush", testPush),
        ("testPushWithMultipleEntries", testPushWithMultipleEntries),
        ("testSubscript", testSubscript),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(NFATests.__allTests__NFATests),
        testCase(ParserTests.__allTests__ParserTests),
        testCase(QueueTests.__allTests__QueueTests),
        testCase(RegexTests.__allTests__RegexTests),
        testCase(StackTests.__allTests__StackTests),
    ]
}
#endif
